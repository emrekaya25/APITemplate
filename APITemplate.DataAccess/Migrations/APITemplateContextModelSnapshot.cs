// <auto-generated />
using System;
using APITemplate.DataAccess.Concrete.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace APITemplate.DataAccess.Migrations
{
    [DbContext(typeof(APITemplateContext))]
    partial class APITemplateContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("APITemplate.Entity.Poco.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddedIPV4Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AddedTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UpdatedIPV4Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddedTime = new DateTime(2024, 9, 19, 5, 36, 16, 881, DateTimeKind.Utc).AddTicks(4012),
                            Guid = new Guid("aeeb0d53-656e-4b25-9aff-32aa09e6007b"),
                            IsActive = true,
                            Name = "Admin",
                            UpdatedTime = new DateTime(2024, 9, 19, 5, 36, 16, 881, DateTimeKind.Utc).AddTicks(4016)
                        },
                        new
                        {
                            Id = 2,
                            AddedTime = new DateTime(2024, 9, 19, 5, 36, 16, 881, DateTimeKind.Utc).AddTicks(4019),
                            Guid = new Guid("4f2f59d0-86fd-4589-a44a-7453295abc61"),
                            IsActive = true,
                            Name = "Çalışan",
                            UpdatedTime = new DateTime(2024, 9, 19, 5, 36, 16, 881, DateTimeKind.Utc).AddTicks(4019)
                        });
                });

            modelBuilder.Entity("APITemplate.Entity.Poco.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddedIPV4Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AddedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedIPV4Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddedTime = new DateTime(2024, 9, 19, 8, 36, 16, 881, DateTimeKind.Local).AddTicks(743),
                            Email = "admin@gmail.com",
                            Guid = new Guid("cf1caa7a-aebb-4627-a6e1-d6a1bd7186c2"),
                            Image = "string",
                            IsActive = true,
                            LastName = "Admin",
                            Name = "Admin",
                            Password = "$2a$11$6XbBHPTcxexgLCNgb8yjke7c9s89evPF16XNQoaZxcXgYzvDg3.Ce",
                            UpdatedTime = new DateTime(2024, 9, 19, 8, 36, 16, 881, DateTimeKind.Local).AddTicks(759)
                        });
                });

            modelBuilder.Entity("APITemplate.Entity.Poco.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddedIPV4Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AddedTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedIPV4Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddedTime = new DateTime(2024, 9, 19, 8, 36, 16, 881, DateTimeKind.Local).AddTicks(9376),
                            Guid = new Guid("8f1e5819-370c-4981-9fe3-bb4fb0bb5e69"),
                            IsActive = true,
                            RoleId = 1,
                            UpdatedTime = new DateTime(2024, 9, 19, 8, 36, 16, 881, DateTimeKind.Local).AddTicks(9385),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("APITemplate.Entity.Poco.UserRole", b =>
                {
                    b.HasOne("APITemplate.Entity.Poco.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("APITemplate.Entity.Poco.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("APITemplate.Entity.Poco.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("APITemplate.Entity.Poco.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
